@using JCRazor.文件浏览器;

<div class="root" @onkeydown="OnAnyKeyPressAsync" tabindex="-1">
	<div class="nav-bar">
		<div style="padding-right: 10px;">
			<button style="width: 2em; height: 100%;" @onclick="OnBackClickAsync">
				◀
			</button>
		</div>
		<div class="path-button-box">
			<button @onclick="async ()=>{await OnPathButtonClickAsync(-1);}">/</button>
			@for (int i = 0; i < SplitedPathArray.Length; i++)
			{
				int index = i;

				<span>&nbsp;&gt;&nbsp;</span>
				<button @onclick="async ()=>{await OnPathButtonClickAsync(index);}">@SplitedPathArray[index]</button>
			}
		</div>
	</div>
	<HorizontalStackView ColumnCount="6" Gap="2em" Padding="10px 0" Height="auto">
		<div>
			<STButton @onclick="UploadFilesAsync">Upload Files</STButton>
		</div>
		<div>
			<STButton @onclick="DeleteSelectedItemsAsync">Delete</STButton>
		</div>
		<div style="width:max-content; white-space:nowrap;">
			<input disabled="@_disable_create_directory_button" @bind="NewDirectoryName" style="height:100%;" placeholder="new directory name" />
			<STButton disabled="@_disable_create_directory_button" @onclick="CreateDirectoryAsync">Create Directory</STButton>
		</div>
		<div>
			<STButton @onclick="SelectMoveMode">Move</STButton>
		</div>
		<div>
			<STButton @onclick="SelectCopyMode">Copy</STButton>
		</div>
		<div>
			<STButton disabled="@DisablePasteButton" @onclick="PasteItemsAsync">Paste</STButton>
		</div>
	</HorizontalStackView>
	<div class="body">
		<div class="directory-content-box">
			<FileBrowerTitle @bind-CheckBoxValue="TitleCheckboxValue"></FileBrowerTitle>
			@{
				int render_index = 0;

				lock (DirectoryList)
				{
					foreach (IDirectoryInfos dir in DirectoryList)
					{
						<FileBrowerItem @key="@(dir)"
										RenderIndex="render_index++"
										Directory="@(dir)"
										SelectedDirectories="SelectedDirectories"
										SelectedFiles="SelectedFiles"
										DoubleClickEvent="OnItemDoubleClickAsync"
										StateChangeEvent="StateHasChanged"
										RenameEvent="OnRenameAsync">

						</FileBrowerItem>
					}
				}

				lock (FileList)
				{
					foreach (IFileInfos file in FileList)
					{
						<FileBrowerItem @key="@(file)"
										RenderIndex="render_index++"
										File="@(file)"
										SelectedDirectories="SelectedDirectories"
										SelectedFiles="SelectedFiles"
										DoubleClickEvent="OnItemDoubleClickAsync"
										StateChangeEvent="StateHasChanged"
										RenameEvent="OnRenameAsync">

						</FileBrowerItem>
					}
				}
			}
		</div>
		<div class="uploading-list-box">
			<UploadingList UploadingStateList="UploadingStateList"></UploadingList>
		</div>
	</div>
</div>

<ItemOperator FileManager="FileManager" @ref="_item_operator">

</ItemOperator>